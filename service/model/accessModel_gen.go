// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	accessFieldNames          = builder.RawFieldNames(&Access{})
	accessRows                = strings.Join(accessFieldNames, ",")
	accessRowsExpectAutoSet   = strings.Join(stringx.Remove(accessFieldNames, "`update_time`", "`create_at`", "`created_at`", "`create_time`", "`update_at`", "`updated_at`"), ",")
	accessRowsWithPlaceHolder = strings.Join(stringx.Remove(accessFieldNames, "`id`", "`update_time`", "`create_at`", "`created_at`", "`create_time`", "`update_at`", "`updated_at`"), "=?,") + "=?"

	cacheAccessIdPrefix = "cache:access:id:"
)

type (
	accessModel interface {
		Insert(ctx context.Context, data *Access) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Access, error)
		Update(ctx context.Context, data *Access) error
		Delete(ctx context.Context, id int64) error
	}

	defaultAccessModel struct {
		sqlc.CachedConn
		table string
	}

	Access struct {
		Id       int64     `db:"id"`
		Location string    `db:"location"` // 接入地点
		Date     time.Time `db:"date"`     // 接入日期
		Num      int64     `db:"num"`      // 接入数量
	}
)

func newAccessModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultAccessModel {
	return &defaultAccessModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`access`",
	}
}

func (m *defaultAccessModel) Delete(ctx context.Context, id int64) error {
	accessIdKey := fmt.Sprintf("%s%v", cacheAccessIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, accessIdKey)
	return err
}

func (m *defaultAccessModel) FindOne(ctx context.Context, id int64) (*Access, error) {
	accessIdKey := fmt.Sprintf("%s%v", cacheAccessIdPrefix, id)
	var resp Access
	err := m.QueryRowCtx(ctx, &resp, accessIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", accessRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAccessModel) Insert(ctx context.Context, data *Access) (sql.Result, error) {
	accessIdKey := fmt.Sprintf("%s%v", cacheAccessIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, accessRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Id, data.Location, data.Date, data.Num)
	}, accessIdKey)
	return ret, err
}

func (m *defaultAccessModel) Update(ctx context.Context, data *Access) error {
	accessIdKey := fmt.Sprintf("%s%v", cacheAccessIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, accessRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.Location, data.Date, data.Num, data.Id)
	}, accessIdKey)
	return err
}

func (m *defaultAccessModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheAccessIdPrefix, primary)
}

func (m *defaultAccessModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", accessRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultAccessModel) tableName() string {
	return m.table
}
