// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	parkingLotFieldNames          = builder.RawFieldNames(&ParkingLot{})
	parkingLotRows                = strings.Join(parkingLotFieldNames, ",")
	parkingLotRowsExpectAutoSet   = strings.Join(stringx.Remove(parkingLotFieldNames, "`updated_at`", "`update_time`", "`create_at`", "`created_at`", "`create_time`", "`update_at`"), ",")
	parkingLotRowsWithPlaceHolder = strings.Join(stringx.Remove(parkingLotFieldNames, "`id`", "`updated_at`", "`update_time`", "`create_at`", "`created_at`", "`create_time`", "`update_at`"), "=?,") + "=?"

	cacheParkingLotIdPrefix = "cache:parkingLot:id:"
)

type (
	parkingLotModel interface {
		Insert(ctx context.Context, data *ParkingLot) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*ParkingLot, error)
		Update(ctx context.Context, data *ParkingLot) error
		Delete(ctx context.Context, id int64) error
	}

	defaultParkingLotModel struct {
		sqlc.CachedConn
		table string
	}

	ParkingLot struct {
		Id       int64  `db:"id"`
		Name     string `db:"name"`     // 停车场名字
		Duration int64  `db:"duration"` // 停车时间（小时）
		Num      int64  `db:"num"`      // 泊车数
	}
)

func newParkingLotModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultParkingLotModel {
	return &defaultParkingLotModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`parking_lot`",
	}
}

func (m *defaultParkingLotModel) Delete(ctx context.Context, id int64) error {
	parkingLotIdKey := fmt.Sprintf("%s%v", cacheParkingLotIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, parkingLotIdKey)
	return err
}

func (m *defaultParkingLotModel) FindOne(ctx context.Context, id int64) (*ParkingLot, error) {
	parkingLotIdKey := fmt.Sprintf("%s%v", cacheParkingLotIdPrefix, id)
	var resp ParkingLot
	err := m.QueryRowCtx(ctx, &resp, parkingLotIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", parkingLotRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultParkingLotModel) Insert(ctx context.Context, data *ParkingLot) (sql.Result, error) {
	parkingLotIdKey := fmt.Sprintf("%s%v", cacheParkingLotIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, parkingLotRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Id, data.Name, data.Duration, data.Num)
	}, parkingLotIdKey)
	return ret, err
}

func (m *defaultParkingLotModel) Update(ctx context.Context, data *ParkingLot) error {
	parkingLotIdKey := fmt.Sprintf("%s%v", cacheParkingLotIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, parkingLotRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.Name, data.Duration, data.Num, data.Id)
	}, parkingLotIdKey)
	return err
}

func (m *defaultParkingLotModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheParkingLotIdPrefix, primary)
}

func (m *defaultParkingLotModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", parkingLotRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultParkingLotModel) tableName() string {
	return m.table
}
