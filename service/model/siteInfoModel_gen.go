// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	siteInfoFieldNames          = builder.RawFieldNames(&SiteInfo{})
	siteInfoRows                = strings.Join(siteInfoFieldNames, ",")
	siteInfoRowsExpectAutoSet   = strings.Join(stringx.Remove(siteInfoFieldNames, "`update_time`", "`create_at`", "`created_at`", "`create_time`", "`update_at`", "`updated_at`"), ",")
	siteInfoRowsWithPlaceHolder = strings.Join(stringx.Remove(siteInfoFieldNames, "`id`", "`update_time`", "`create_at`", "`created_at`", "`create_time`", "`update_at`", "`updated_at`"), "=?,") + "=?"

	cacheSiteInfoIdPrefix = "cache:siteInfo:id:"
)

type (
	siteInfoModel interface {
		Insert(ctx context.Context, data *SiteInfo) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*SiteInfo, error)
		Update(ctx context.Context, data *SiteInfo) error
		Delete(ctx context.Context, id int64) error
	}

	defaultSiteInfoModel struct {
		sqlc.CachedConn
		table string
	}

	SiteInfo struct {
		Id           int64     `db:"id"`
		Date         time.Time `db:"date"`          // 日期
		RevisitRate  int64     `db:"revisit_rate"`  // 重复访问率（%）
		SiteHealth   int64     `db:"site_health"`   // 站点健康度
		RfHealth     int64     `db:"rf_health"`     // 射频健康度
		DeviceHealth int64     `db:"device_health"` // 设备健康度
		Flow         int64     `db:"flow"`          // 当日站点流量
	}
)

func newSiteInfoModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultSiteInfoModel {
	return &defaultSiteInfoModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`site_info`",
	}
}

func (m *defaultSiteInfoModel) Delete(ctx context.Context, id int64) error {
	siteInfoIdKey := fmt.Sprintf("%s%v", cacheSiteInfoIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, siteInfoIdKey)
	return err
}

func (m *defaultSiteInfoModel) FindOne(ctx context.Context, id int64) (*SiteInfo, error) {
	siteInfoIdKey := fmt.Sprintf("%s%v", cacheSiteInfoIdPrefix, id)
	var resp SiteInfo
	err := m.QueryRowCtx(ctx, &resp, siteInfoIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", siteInfoRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSiteInfoModel) Insert(ctx context.Context, data *SiteInfo) (sql.Result, error) {
	siteInfoIdKey := fmt.Sprintf("%s%v", cacheSiteInfoIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?)", m.table, siteInfoRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Id, data.Date, data.RevisitRate, data.SiteHealth, data.RfHealth, data.DeviceHealth, data.Flow)
	}, siteInfoIdKey)
	return ret, err
}

func (m *defaultSiteInfoModel) Update(ctx context.Context, data *SiteInfo) error {
	siteInfoIdKey := fmt.Sprintf("%s%v", cacheSiteInfoIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, siteInfoRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.Date, data.RevisitRate, data.SiteHealth, data.RfHealth, data.DeviceHealth, data.Flow, data.Id)
	}, siteInfoIdKey)
	return err
}

func (m *defaultSiteInfoModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheSiteInfoIdPrefix, primary)
}

func (m *defaultSiteInfoModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", siteInfoRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultSiteInfoModel) tableName() string {
	return m.table
}
