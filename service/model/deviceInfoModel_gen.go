// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	deviceInfoFieldNames          = builder.RawFieldNames(&DeviceInfo{})
	deviceInfoRows                = strings.Join(deviceInfoFieldNames, ",")
	deviceInfoRowsExpectAutoSet   = strings.Join(stringx.Remove(deviceInfoFieldNames, "`id`", "`create_at`", "`created_at`", "`create_time`", "`update_at`", "`updated_at`", "`update_time`"), ",")
	deviceInfoRowsWithPlaceHolder = strings.Join(stringx.Remove(deviceInfoFieldNames, "`id`", "`create_at`", "`created_at`", "`create_time`", "`update_at`", "`updated_at`", "`update_time`"), "=?,") + "=?"
)

type (
	deviceInfoModel interface {
		Insert(ctx context.Context, data *DeviceInfo) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*DeviceInfo, error)
		Update(ctx context.Context, data *DeviceInfo) error
		Delete(ctx context.Context, id int64) error
		QueryAll(ctx context.Context) (*[]DeviceInfo, error)

	}

	defaultDeviceInfoModel struct {
		conn  sqlx.SqlConn
		table string
	}

	DeviceInfo struct {
		Id           int64   `db:"id"`
		UplinkRate   float64 `db:"uplink_rate"`   // 上行速率
		DownlinkRate float64 `db:"downlink_rate"` // 下载速率
		Flow         float64 `db:"flow"`          // 流量
		CpuRate      float64 `db:"cpu_rate"`      // CPU占有率
		Longitude    float64 `db:"longitude"`     // 经度
		Latitude     float64 `db:"latitude"`      // 纬度
	}
)

func newDeviceInfoModel(conn sqlx.SqlConn) *defaultDeviceInfoModel {
	return &defaultDeviceInfoModel{
		conn:  conn,
		table: "`device_info`",
	}
}

func (m *defaultDeviceInfoModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultDeviceInfoModel) FindOne(ctx context.Context, id int64) (*DeviceInfo, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", deviceInfoRows, m.table)
	var resp DeviceInfo
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultDeviceInfoModel) Insert(ctx context.Context, data *DeviceInfo) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?)", m.table, deviceInfoRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.UplinkRate, data.DownlinkRate, data.Flow, data.CpuRate, data.Longitude, data.Latitude)
	return ret, err
}

func (m *defaultDeviceInfoModel) Update(ctx context.Context, data *DeviceInfo) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, deviceInfoRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.UplinkRate, data.DownlinkRate, data.Flow, data.CpuRate, data.Longitude, data.Latitude, data.Id)
	return err
}

func (m *defaultDeviceInfoModel) tableName() string {
	return m.table
}
func (m *defaultDeviceInfoModel) QueryAll(ctx context.Context) (*[]DeviceInfo, error) {
	query := fmt.Sprintf("select * from %s", m.table)
	resp := make([]DeviceInfo, 0)
	err := m.conn.QueryRowsCtx(ctx, &resp, query)
	return &resp, err
}
