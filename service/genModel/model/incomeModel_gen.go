// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	incomeFieldNames          = builder.RawFieldNames(&Income{})
	incomeRows                = strings.Join(incomeFieldNames, ",")
	incomeRowsExpectAutoSet   = strings.Join(stringx.Remove(incomeFieldNames, "`create_time`", "`update_at`", "`updated_at`", "`update_time`", "`create_at`", "`created_at`"), ",")
	incomeRowsWithPlaceHolder = strings.Join(stringx.Remove(incomeFieldNames, "`id`", "`create_time`", "`update_at`", "`updated_at`", "`update_time`", "`create_at`", "`created_at`"), "=?,") + "=?"
)

type (
	incomeModel interface {
		Insert(ctx context.Context, data *Income) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Income, error)
		Update(ctx context.Context, data *Income) error
		Delete(ctx context.Context, id int64) error
	}

	defaultIncomeModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Income struct {
		Id   int64     `db:"id"`
		Type string    `db:"type"` // 收入类型
		Date time.Time `db:"date"` // 日期
		Num  int64     `db:"num"`  // 当天收入
	}
)

func newIncomeModel(conn sqlx.SqlConn) *defaultIncomeModel {
	return &defaultIncomeModel{
		conn:  conn,
		table: "`income`",
	}
}

func (m *defaultIncomeModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultIncomeModel) FindOne(ctx context.Context, id int64) (*Income, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", incomeRows, m.table)
	var resp Income
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultIncomeModel) Insert(ctx context.Context, data *Income) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, incomeRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Id, data.Type, data.Date, data.Num)
	return ret, err
}

func (m *defaultIncomeModel) Update(ctx context.Context, data *Income) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, incomeRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Type, data.Date, data.Num, data.Id)
	return err
}

func (m *defaultIncomeModel) tableName() string {
	return m.table
}
