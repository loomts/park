// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	touristCarProvinceFieldNames          = builder.RawFieldNames(&TouristCarProvince{})
	touristCarProvinceRows                = strings.Join(touristCarProvinceFieldNames, ",")
	touristCarProvinceRowsExpectAutoSet   = strings.Join(stringx.Remove(touristCarProvinceFieldNames, "`id`", "`create_time`", "`update_at`", "`updated_at`", "`update_time`", "`create_at`", "`created_at`"), ",")
	touristCarProvinceRowsWithPlaceHolder = strings.Join(stringx.Remove(touristCarProvinceFieldNames, "`id`", "`create_time`", "`update_at`", "`updated_at`", "`update_time`", "`create_at`", "`created_at`"), "=?,") + "=?"
)

type (
	touristCarProvinceModel interface {
		Insert(ctx context.Context, data *TouristCarProvince) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*TouristCarProvince, error)
		Update(ctx context.Context, data *TouristCarProvince) error
		Delete(ctx context.Context, id int64) error
	}

	defaultTouristCarProvinceModel struct {
		conn  sqlx.SqlConn
		table string
	}

	TouristCarProvince struct {
		Id       int64     `db:"id"`
		Province string    `db:"province"` // 省份
		Date     time.Time `db:"date"`     // 日期
		FlowNum  int64     `db:"flow_num"` // 人流数量
		CarNum   int64     `db:"car_num"`  // 车辆数
	}
)

func newTouristCarProvinceModel(conn sqlx.SqlConn) *defaultTouristCarProvinceModel {
	return &defaultTouristCarProvinceModel{
		conn:  conn,
		table: "`tourist_car_province`",
	}
}

func (m *defaultTouristCarProvinceModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultTouristCarProvinceModel) FindOne(ctx context.Context, id int64) (*TouristCarProvince, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", touristCarProvinceRows, m.table)
	var resp TouristCarProvince
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTouristCarProvinceModel) Insert(ctx context.Context, data *TouristCarProvince) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, touristCarProvinceRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Province, data.Date, data.FlowNum, data.CarNum)
	return ret, err
}

func (m *defaultTouristCarProvinceModel) Update(ctx context.Context, data *TouristCarProvince) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, touristCarProvinceRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Province, data.Date, data.FlowNum, data.CarNum, data.Id)
	return err
}

func (m *defaultTouristCarProvinceModel) tableName() string {
	return m.table
}
