// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	touristFlowFieldNames          = builder.RawFieldNames(&TouristFlow{})
	touristFlowRows                = strings.Join(touristFlowFieldNames, ",")
	touristFlowRowsExpectAutoSet   = strings.Join(stringx.Remove(touristFlowFieldNames, "`id`", "`update_at`", "`updated_at`", "`update_time`", "`create_at`", "`created_at`", "`create_time`"), ",")
	touristFlowRowsWithPlaceHolder = strings.Join(stringx.Remove(touristFlowFieldNames, "`id`", "`update_at`", "`updated_at`", "`update_time`", "`create_at`", "`created_at`", "`create_time`"), "=?,") + "=?"
)

type (
	touristFlowModel interface {
		Insert(ctx context.Context, data *TouristFlow) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*TouristFlow, error)
		Update(ctx context.Context, data *TouristFlow) error
		Delete(ctx context.Context, id int64) error
	}

	defaultTouristFlowModel struct {
		conn  sqlx.SqlConn
		table string
	}

	TouristFlow struct {
		Id       int64     `db:"id"`
		Location string    `db:"location"` // 园区地点
		Date     time.Time `db:"date"`     // 时间
		Num      int64     `db:"num"`      // 游客数量
	}
)

func newTouristFlowModel(conn sqlx.SqlConn) *defaultTouristFlowModel {
	return &defaultTouristFlowModel{
		conn:  conn,
		table: "`tourist_flow`",
	}
}

func (m *defaultTouristFlowModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultTouristFlowModel) FindOne(ctx context.Context, id int64) (*TouristFlow, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", touristFlowRows, m.table)
	var resp TouristFlow
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTouristFlowModel) Insert(ctx context.Context, data *TouristFlow) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, touristFlowRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Location, data.Date, data.Num)
	return ret, err
}

func (m *defaultTouristFlowModel) Update(ctx context.Context, data *TouristFlow) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, touristFlowRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Location, data.Date, data.Num, data.Id)
	return err
}

func (m *defaultTouristFlowModel) tableName() string {
	return m.table
}
